{"ast":null,"code":"import _objectSpread from \"/home/whitewolf/projekt/expedition/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/whitewolf/projekt/expedition/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/whitewolf/projekt/expedition/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/whitewolf/projekt/expedition/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _inherits from \"/home/whitewolf/projekt/expedition/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/whitewolf/projekt/expedition/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/whitewolf/projekt/expedition/src/components/AddingBooks.js\";\nimport React, { Component } from 'react';\nimport firebase from 'firebase';\nimport Listing from './Listing';\nimport { FormErrors } from './FormErrors';\nimport { BasicButton, BasicInput } from '../styles.js';\n\nvar AddBook =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AddBook, _Component);\n\n  function AddBook() {\n    var _this;\n\n    _classCallCheck(this, AddBook);\n\n    _this.state = {\n      title: '',\n      author: '',\n      genre: '',\n      paperback: '',\n      publisher: '',\n      language: '',\n      publicationDate: '',\n      image: null,\n      filename: '',\n      url: '',\n      formErrors: {\n        title: '',\n        author: '',\n        genre: '',\n        paperback: '',\n        publisher: '',\n        language: '',\n        publicationDate: ''\n      },\n      titleValid: false,\n      authorValid: false,\n      genreValid: false,\n      paperbackValid: false,\n      publisherValid: false,\n      languageValid: false,\n      publicationDateValid: false\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _possibleConstructorReturn(_this);\n  }\n\n  _createClass(AddBook, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var settings = {\n        timestampsInSnapshots: true\n      };\n      firebase.firestore().settings(settings);\n      var db = firebase.firestore();\n      db.collection('Authors').get().then(function (querySnapshot) {\n        var authors = [];\n        querySnapshot.forEach(function (doc) {\n          return authors.push(_objectSpread({\n            id: doc.id\n          }, doc.data()));\n        });\n\n        _this2.setState({\n          authors: authors\n        });\n\n        var books = [];\n\n        _this2.state.authors.forEach(function (author) {\n          return db.collection('Authors').doc(author.id).collection('Books').get().then(function (querySnapshot) {\n            querySnapshot.forEach(function (doc) {\n              return books.push(_objectSpread({\n                id: doc.id,\n                authorid: author.id,\n                author: author.name\n              }, doc.data()));\n            });\n\n            _this2.setState({\n              books: books\n            });\n          });\n        });\n      });\n      console.log('Got Books');\n    }\n  }, {\n    key: \"validateField\",\n    value: function validateField(fieldName, value) {\n      var fieldValidationErrors = this.state.formErrors;\n      var titleValid = this.state.titleValid;\n      var authorValid = this.state.authorValid;\n      var genreValid = this.state.genreValid;\n      var paperbackValid = this.state.paperbackValid;\n      var publisherValid = this.state.publisherValid;\n      var languageValid = this.state.languageValid;\n      var publicationDateValid = this.state.publicationDateValid;\n\n      switch (fieldName) {\n        case 'title':\n          titleValid = value.length >= 1;\n          fieldValidationErrors.Title = titleValid ? '' : ' is missing';\n          break;\n\n        case 'author':\n          authorValid = value.length >= 1;\n          fieldValidationErrors.Author = authorValid ? '' : ' is missing';\n          break;\n\n        case 'genre':\n          genreValid = value.length >= 3 && !value.match('[0-9]+'); //s-f\n\n          fieldValidationErrors.Genre = genreValid ? '' : ' is too short or contains number';\n          break;\n\n        case 'paperback':\n          paperbackValid = value.match('^[0-9]+$') && !value.match('^[0]+');\n          fieldValidationErrors.Paperback = paperbackValid ? '' : ' must contain number';\n          break;\n\n        case 'publisher':\n          publisherValid = value.length >= 3;\n          fieldValidationErrors.Publisher = publisherValid ? '' : ' is too short';\n          break;\n\n        case 'language':\n          languageValid = value.length >= 2; //PL\n\n          fieldValidationErrors.Language = languageValid ? '' : ' is too short';\n          break;\n\n        case 'publicationDate':\n          publicationDateValid = true; // do poprawy\n\n          fieldValidationErrors.Publication_Date = publicationDateValid ? '' : ' is in incorrect format';\n          break;\n\n        default:\n          break;\n      }\n\n      this.setState({\n        formErrors: fieldValidationErrors,\n        titleValid: titleValid,\n        authorValid: authorValid,\n        genreValid: genreValid,\n        paperbackValid: paperbackValid,\n        publisherValid: publisherValid,\n        languageValid: languageValid,\n        publicationDateValid: publicationDateValid\n      }, this.validateForm);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }, \"Add additional books:\"), React.createElement(\"form\", {\n        onSubmit: this.addBook,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, React.createElement(BasicInput, {\n        type: \"text\",\n        name: \"title\",\n        placeholder: \"Title\",\n        onChange: this.updateInput,\n        value: this.state.title,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }), React.createElement(BasicInput, {\n        type: \"text\",\n        name: \"author\",\n        placeholder: \"Author\",\n        onChange: this.updateInput,\n        value: this.state.author,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }), React.createElement(BasicInput, {\n        type: \"text\",\n        name: \"genre\",\n        placeholder: \"Genre\",\n        onChange: this.updateInput,\n        value: this.state.genre,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }), React.createElement(BasicInput, {\n        type: \"text\",\n        name: \"paperback\",\n        placeholder: \"Paperback\",\n        onChange: this.updateInput,\n        value: this.state.paperback,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }), React.createElement(BasicInput, {\n        type: \"text\",\n        name: \"publisher\",\n        placeholder: \"Publisher\",\n        onChange: this.updateInput,\n        value: this.state.publisher,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }), React.createElement(BasicInput, {\n        type: \"text\",\n        name: \"language\",\n        placeholder: \"Language\",\n        onChange: this.updateInput,\n        value: this.state.language,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      }), React.createElement(BasicInput, {\n        type: \"text\",\n        name: \"publicationDate\",\n        placeholder: \"Publication date (dd-mm-yyyy)\",\n        onChange: this.updateInput,\n        value: this.state.publicationDate,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"file\",\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      }, React.createElement(BasicButton, {\n        type: \"submit\",\n        disabled: !this.state.formValid,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274\n        },\n        __self: this\n      }, \"Submit\"))), React.createElement(FormErrors, {\n        formErrors: this.state.formErrors,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281\n        },\n        __self: this\n      }), React.createElement(Listing, {\n        books: this.props.books,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return AddBook;\n}(Component);\n\nexport default AddBook;","map":{"version":3,"sources":["/home/whitewolf/projekt/expedition/src/components/AddingBooks.js"],"names":["React","Component","firebase","Listing","FormErrors","BasicButton","BasicInput","AddBook","state","title","author","genre","paperback","publisher","language","publicationDate","image","filename","url","formErrors","titleValid","authorValid","genreValid","paperbackValid","publisherValid","languageValid","publicationDateValid","handleChange","bind","settings","timestampsInSnapshots","firestore","db","collection","get","then","querySnapshot","authors","forEach","doc","push","id","data","setState","books","authorid","name","console","log","fieldName","value","fieldValidationErrors","length","Title","Author","match","Genre","Paperback","Publisher","Language","Publication_Date","validateForm","addBook","updateInput","formValid","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport firebase from 'firebase'\nimport Listing from './Listing';\nimport { FormErrors } from './FormErrors';\nimport { BasicButton, BasicInput } from '../styles.js';\n\nclass AddBook extends Component {\n\n    constructor() {\n        this.state = {\n            title: '',\n            author: '',\n            genre: '',\n            paperback: '',\n            publisher: '',\n            language: '',\n            publicationDate: '',\n            image: null,\n            filename: '',\n            url: '',\n            formErrors: {\n                title: '',\n                author: '',\n                genre: '',\n                paperback: '',\n                publisher: '',\n                language: '',\n                publicationDate: ''\n            },\n            titleValid: false,\n            authorValid: false,\n            genreValid: false,\n            paperbackValid: false,\n            publisherValid: false,\n            languageValid: false,\n            publicationDateValid: false\n        };\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {   \n        const settings = { timestampsInSnapshots: true };\n        firebase.firestore().settings(settings);\n    \n        var db = firebase.firestore()\n        db.collection('Authors')\n          .get().then(querySnapshot => {\n            const authors = []\n            querySnapshot.forEach(doc =>\n              authors.push({ id: doc.id, ...doc.data() })\n            )\n            this.setState({ authors: authors })\n            const books = []\n            this.state.authors.forEach(author =>\n              db.collection('Authors').doc(author.id).collection('Books')\n                .get().then(querySnapshot => {\n    \n                  querySnapshot.forEach(doc =>\n                    books.push({\n                      id: doc.id,\n                      authorid: author.id,\n                      author: author.name,\n                      ...doc.data()\n                    })\n                  )\n                  this.setState({ books: books })\n                })\n            )\n          })\n        console.log('Got Books')\n      }\n\n    handleChange = e => {\n        if (e.target.files[0]) {\n            const image = e.target.files[0];\n            this.setState(() => ({ image }))\n            this.setState({ filename: image.name });\n            this.setState({ url: ('/image/' + image.name) });\n        }\n    }\n\n    updateInput = e => {\n        const name = e.target.name;\n        const value = e.target.value;\n        this.setState(\n            {\n                [name]: value\n            },\n            () => {\n                this.validateField(name, value);\n            }\n        );\n    };\n\n\n\n    addToDb = e => {\n        e.preventDefault();\n        const { filename } = this.state;\n\n        var storageRef = firebase.storage().ref('/images/' + filename);\n        var uploadImage = storageRef.put(this.state.image);\n\n        uploadImage.on('state_changed', function (snapshot) {\n        }, function (error) {\n        }, function () {\n            console.log('Image added')\n        });\n\n        let author = this.state.author\n        var flag = null\n        this.props.authors.map(function (e) {\n            if (e.name == author) { flag = e.id }\n        })\n        var db = firebase.firestore().collection('Authors')\n        if (flag == null) {\n            db.add({\n                name: this.state.author,\n                addedBy: firebase.auth().currentUser.uid\n            }).then(docRef => {\n                console.log('Author added', docRef.id);\n                db.doc(docRef.id).collection('Books').add({\n                    title: this.state.title,\n                    genre: this.state.genre,\n                    paperback: this.state.paperback,\n                    publisher: this.state.publisher,\n                    language: this.state.language,\n                    publicationDate: this.state.publicationDate,\n                    coverUrl: this.state.url,\n                    favedBy: []\n                }).then(docRef => console.log('Book added', docRef.id)).then(() => {\n                    window.location.reload();\n                });\n            })\n        } else {\n            db.doc(flag).collection('Books').add({\n                title: this.state.title,\n                genre: this.state.genre,\n                paperback: this.state.paperback,\n                publisher: this.state.publisher,\n                language: this.state.language,\n                publicationDate: this.state.publicationDate,\n                coverUrl: this.state.url,\n                favedBy: []\n            }).then(docRef => console.log('Book added', docRef.id)).then(() => {\n                window.location.reload();\n            });\n        }\n\n\n    };\n\n    validateField(fieldName, value) {\n        let fieldValidationErrors = this.state.formErrors;\n        let titleValid = this.state.titleValid;\n        let authorValid = this.state.authorValid;\n        let genreValid = this.state.genreValid;\n        let paperbackValid = this.state.paperbackValid;\n        let publisherValid = this.state.publisherValid;\n        let languageValid = this.state.languageValid;\n        let publicationDateValid = this.state.publicationDateValid;\n\n        switch (fieldName) {\n            case 'title':\n                titleValid = value.length >= 1;\n                fieldValidationErrors.Title = titleValid ? '' : ' is missing';\n                break;\n            case 'author':\n                authorValid = value.length >= 1;\n                fieldValidationErrors.Author = authorValid ? '' : ' is missing';\n                break;\n            case 'genre':\n                genreValid = value.length >= 3 && !value.match('[0-9]+'); //s-f\n                fieldValidationErrors.Genre = genreValid\n                    ? ''\n                    : ' is too short or contains number';\n                break;\n            case 'paperback':\n                paperbackValid = value.match('^[0-9]+$') && !value.match('^[0]+');\n                fieldValidationErrors.Paperback = paperbackValid\n                    ? ''\n                    : ' must contain number';\n                break;\n            case 'publisher':\n                publisherValid = value.length >= 3;\n                fieldValidationErrors.Publisher = publisherValid ? '' : ' is too short';\n                break;\n            case 'language':\n                languageValid = value.length >= 2; //PL\n                fieldValidationErrors.Language = languageValid ? '' : ' is too short';\n                break;\n            case 'publicationDate':\n                publicationDateValid = true; // do poprawy\n                fieldValidationErrors.Publication_Date = publicationDateValid\n                    ? ''\n                    : ' is in incorrect format';\n                break;\n            default:\n                break;\n        }\n        this.setState(\n            {\n                formErrors: fieldValidationErrors,\n                titleValid,\n                authorValid,\n                genreValid,\n                paperbackValid,\n                publisherValid,\n                languageValid,\n                publicationDateValid\n            },\n            this.validateForm\n        );\n    }\n\n    render() {\n\n        return (\n            <React.Fragment>\n                <div>\n                    <p>Add additional books:</p>\n                    <form onSubmit={this.addBook}>\n                        <BasicInput\n                            type=\"text\"\n                            name=\"title\"\n                            placeholder=\"Title\"\n                            onChange={this.updateInput}\n                            value={this.state.title}\n                        />\n                        <BasicInput\n                            type=\"text\"\n                            name=\"author\"\n                            placeholder=\"Author\"\n                            onChange={this.updateInput}\n                            value={this.state.author}\n                        />\n                        <BasicInput\n                            type=\"text\"\n                            name=\"genre\"\n                            placeholder=\"Genre\"\n                            onChange={this.updateInput}\n                            value={this.state.genre}\n                        />\n                        <BasicInput\n                            type=\"text\"\n                            name=\"paperback\"\n                            placeholder=\"Paperback\"\n                            onChange={this.updateInput}\n                            value={this.state.paperback}\n                        />\n                        <BasicInput\n                            type=\"text\"\n                            name=\"publisher\"\n                            placeholder=\"Publisher\"\n                            onChange={this.updateInput}\n                            value={this.state.publisher}\n                        />\n                        <BasicInput\n                            type=\"text\"\n                            name=\"language\"\n                            placeholder=\"Language\"\n                            onChange={this.updateInput}\n                            value={this.state.language}\n                        />\n                        <BasicInput\n                            type=\"text\"\n                            name=\"publicationDate\"\n                            placeholder=\"Publication date (dd-mm-yyyy)\"\n                            onChange={this.updateInput}\n                            value={this.state.publicationDate}\n                        />\n                        <input type=\"file\" onChange={this.handleChange} />\n                        <div>\n                            <BasicButton type=\"submit\" disabled={!this.state.formValid}>\n                                Submit\n                            </BasicButton>\n                        </div>\n                    </form>\n                    <FormErrors formErrors={this.state.formErrors} />\n                </div>\n                <br />\n                <Listing books={this.props.books} />\n            </React.Fragment>\n        );\n    }\n\n}\nexport default AddBook;"]},"metadata":{},"sourceType":"module"}