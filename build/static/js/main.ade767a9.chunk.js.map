{"version":3,"sources":["components/Login.js","components/AddingBooks.js","components/Listing.js","App.js","components/ServiceWorker.js","index.js"],"names":["uiConfig","signInFlow","signInOptions","firebase","auth","GoogleAuthProvider","PROVIDER_ID","FacebookAuthProvider","EmailAuthProvider","callbacks","signInSuccessWithAuthResult","Login","react_default","a","createElement","StyledFirebaseAuth_default","firebaseAuth","Component","AddBook","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","target","files","image","setState","filename","name","url","updateInput","defineProperty","value","addBook","preventDefault","state","storage","ref","put","on","snapshot","error","console","log","firestore","collection","add","title","author","addedBy","currentUser","uid","coverUrl","then","bind","assertThisInitialized","onSubmit","type","placeholder","onChange","Listing","books","_this2","onSnapshot","querySnapshot","forEach","doc","push","objectSpread","id","data","list","map","b","key","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","App","isLoggedIn","unregisterAuthObserver","onAuthStateChanged","user","settings","timestampsInSnapshots","className","displayName","onClick","signOut","AddingBooks","components_Listing","components_Login","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0QAIMA,EAAW,CACfC,WAAY,QACZC,cAAe,CACbC,IAASC,KAAKC,mBAAmBC,YACjCH,IAASC,KAAKG,qBAAqBD,YACnCH,IAASC,KAAKI,kBAAkBF,aAElCG,UAAW,CACTC,4BAA6B,kBAAM,KAqBxBC,mLAfX,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,2BAEEF,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACEb,SAAUA,EACVgB,aAAcb,IAASC,iBATfa,6BC4ELC,cAvFX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAWJI,aAAe,SAAAC,GACX,GAAGA,EAAEC,OAAOC,MAAM,GAAI,CAClB,IAAMC,EAAQH,EAAEC,OAAOC,MAAM,GAC7BV,EAAKY,SAAS,iBAAO,CAACD,WACtBX,EAAKY,SAAS,CAAEC,SAAUF,EAAMG,OAChCd,EAAKY,SAAS,CAAEG,IAAM,UAAYJ,EAAMG,SAjBlCd,EAqBdgB,YAAc,SAAAR,GACVR,EAAKY,SAALX,OAAAgB,EAAA,EAAAhB,CAAA,GACGO,EAAEC,OAAOK,KAAON,EAAEC,OAAOS,SAvBlBlB,EA2BdmB,QAAU,SAAAX,GACNA,EAAEY,iBADS,IAEHP,EAAab,EAAKqB,MAAlBR,SAES7B,IAASsC,UAAUC,IAAI,WAAaV,GACxBW,IAAIxB,EAAKqB,MAAMV,OAEhCc,GAAG,gBAAiB,SAASC,KAEtC,SAASC,KAET,WACCC,QAAQC,IAAI,iBAIhB7C,IAAS8C,YAAYC,WAAW,SAASC,IAAI,CAC3CC,MAAOjC,EAAKqB,MAAMY,MAClBC,OAAQlC,EAAKqB,MAAMa,OACnBC,QAASnD,IAASC,OAAOmD,YAAYC,IACrCC,SAAUtC,EAAKqB,MAAMN,MAEtBwB,KAAK,kBAAMX,QAAQC,IAAI,oBAExB7B,EAAKY,SAAS,CACZqB,MAAO,GACPC,OAAQ,MAnDVlC,EAAKqB,MAAQ,CACZY,MAAO,GACPC,OAAQ,GACRvB,MAAO,KACPE,SAAU,GACVE,IAAK,IAENf,EAAKO,aAAeP,EAAKO,aAAaiC,KAAlBvC,OAAAwC,EAAA,EAAAxC,QAAAwC,EAAA,EAAAxC,CAAAD,KATVA,wEA2DV,OACAP,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAAA,QAAM+C,SAAUvC,KAAKgB,SACjB1B,EAAAC,EAAAC,cAAA,SACAgD,KAAK,OACL7B,KAAK,QACL8B,YAAY,QACZC,SAAU1C,KAAKa,YACfE,MAAOf,KAAKkB,MAAMY,QAElBxC,EAAAC,EAAAC,cAAA,SACAgD,KAAK,OACL7B,KAAK,SACL8B,YAAY,SACZC,SAAU1C,KAAKa,YACfE,MAAOf,KAAKkB,MAAMa,SAElBzC,EAAAC,EAAAC,cAAA,SAAOgD,KAAK,OACZE,SAAU1C,KAAKI,eAEfd,EAAAC,EAAAC,cAAA,UAAQgD,KAAK,UAAb,mBAlFM7C,qBCoCPgD,6MAlCXzB,MAAQ,CACJ0B,MAAO,0EAGJ,IAAAC,EAAA7C,KACHnB,IAAS8C,YACJC,WAAW,SACXkB,WAAW,SAAAC,GACR,IAAMH,EAAQ,GACdG,EAAcC,QAAQ,SAAAC,GAAG,OACrBL,EAAMM,KAANpD,OAAAqD,EAAA,EAAArD,CAAA,CAAYsD,GAAIH,EAAIG,IAAOH,EAAII,WAEnCR,EAAKpC,SAAS,CAACmC,MAAOA,uCAIzB,IACEA,EAAS5C,KAAKkB,MAAd0B,MAGP,OAFA5C,KAAKsD,OAGDhE,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,UACKoD,EAAMW,IAAI,SAAAC,GAAC,OACRlE,EAAAC,EAAAC,cAAA,MAAIiE,IAAKD,EAAEJ,IAAX,IACMI,EAAE1B,MADR,YACwBxC,EAAAC,EAAAC,cAAA,SAAIgE,EAAEzB,oBA5BhCpC,aCYtBd,IAAS6E,cATI,CAEXC,OAAQ,0CACRC,WAAY,4CACZC,YAAa,oDACbC,UAAW,4BACXC,cAAe,wCACfC,kBAAmB,qBA6CNC,6MAxCb/C,MAAQ,CACNgD,YAAY,sFAGM,IAAArB,EAAA7C,KAClBA,KAAKmE,uBAAyBtF,IAC3BC,OACAsF,mBAAmB,SAAAC,GAAI,OAAIxB,EAAKpC,SAAS,CAAEyD,aAAcG,MAG5DxF,IAAS8C,YAAY2C,SADJ,CAAEC,uBAAuB,mDAK1CvE,KAAKmE,0DAML,OAFuBnE,KAAKkB,MAApBgD,WAMJ5E,EAAAC,EAAAC,cAAA,OAAKgF,UAAU,OACblF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,oBACWX,IAASC,OAAOmD,YAAYwC,YADvC,4BAIAnF,EAAAC,EAAAC,cAAA,UAAQkF,QAAS,kBAAM7F,IAASC,OAAO6F,YAAvC,UACArF,EAAAC,EAAAC,cAACoF,EAAD,MACAtF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACqF,EAAD,OAZGvF,EAAAC,EAAAC,cAACsF,EAAD,aAtBKnF,aCLEoF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/F,EAAAC,EAAAC,cAAC8F,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvD,KAAK,SAAAwD,GACjCA,EAAaC","file":"static/js/main.ade767a9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\nimport firebase from 'firebase';\n\nconst uiConfig = {\n  signInFlow: 'popup',\n  signInOptions: [\n    firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n    firebase.auth.FacebookAuthProvider.PROVIDER_ID,\n    firebase.auth.EmailAuthProvider.PROVIDER_ID\n  ],\n  callbacks: {\n    signInSuccessWithAuthResult: () => false\n  }\n};\n\nclass Login extends Component {\n  render() {\n    return (\n      <div>\n        <h1>Expedition</h1>\n        <p>Please Log-in:</p>\n        {\n          <StyledFirebaseAuth\n            uiConfig={uiConfig}\n            firebaseAuth={firebase.auth()}\n          />\n        }\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import React, {Component} from 'react'\nimport firebase from 'firebase'\n\nclass AddBook extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n         title: [],\n         author: '',\n         image: null,\n         filename: '',\n         url: ''\n        };\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange = e => {\n        if(e.target.files[0]) {\n            const image = e.target.files[0];\n            this.setState(() => ({image}))\n            this.setState({ filename: image.name});\n            this.setState({ url: ('/image/' + image.name) });\n        }\n    }\n\n    updateInput = e => {\n        this.setState({\n          [e.target.name]: e.target.value\n        });\n    }\n\n    addBook = e => {\n        e.preventDefault();\n        const { filename } = this.state;\n\n        var storageRef = firebase.storage().ref('/images/' + filename);\n        var uploadImage = storageRef.put(this.state.image);\n\n        uploadImage.on('state_changed', function(snapshot){\n\n        }, function(error) {\n\n        }, function() {\n            console.log('Image added')\n        });\n\n\n        firebase.firestore().collection('Books').add({\n          title: this.state.title,\n          author: this.state.author,\n          addedBy: firebase.auth().currentUser.uid,\n          coverUrl: this.state.url\n        })\n        .then(() => console.log('Document added')); \n\n        this.setState({\n          title: '',\n          author: '',  \n        });\n      };\n\n    render() {\n\n        return (\n        <div>\n            <p>Add additional books:</p>\n            <form onSubmit={this.addBook}>\n                <input\n                type=\"text\"\n                name=\"title\"\n                placeholder=\"Title\"\n                onChange={this.updateInput}\n                value={this.state.title}\n                />\n                <input\n                type=\"text\"\n                name=\"author\"\n                placeholder=\"Author\"\n                onChange={this.updateInput}\n                value={this.state.author}\n                />\n                <input type=\"file\"\n                onChange={this.handleChange}\n                />\n                <button type=\"submit\">Submit</button>\n            </form>\n        </div>\n        );\n    }\n\n}\nexport default AddBook;","import React, {Component} from 'react'\nimport firebase from 'firebase'\n\nclass Listing extends Component {\n    \n    state = {\n        books: []\n    }\n\n    list() {\n        firebase.firestore()\n            .collection('Books')\n            .onSnapshot(querySnapshot => {\n                const books = []\n                querySnapshot.forEach(doc =>\n                    books.push({id: doc.id, ...doc.data()})\n                )\n                this.setState({books: books})\n            })\n    }\n\n    render() {\n        const {books} = this.state\n        this.list()\n\n        return(\n            <div>\n                <p>List of known books:</p>\n                <ul>\n                    {books.map(b =>\n                        <li key={b.id}>\n                            \"{b.title}\" &mdash; <i>{b.author}</i>\n                        </li>\n                    )}\n                </ul>\n            </div>\n        )\n    }\n}\nexport default Listing;","import React, { Component } from 'react';\nimport Login from './components/Login';\nimport AddBook from './components/AddingBooks';\nimport Listing from './components/Listing';\nimport firebase from 'firebase';\n\nvar config = {\n  //firebase setup\n  apiKey: 'AIzaSyDb6MxVPz02Dzu6TBU6uRMZk6lSfsEuH8E',\n  authDomain: 'solwit-pjatk-arc-2018-gr3.firebaseapp.com',\n  databaseURL: 'https://solwit-pjatk-arc-2018-gr3.firebaseio.com/',\n  projectId: 'solwit-pjatk-arc-2018-gr3',\n  storageBucket: 'solwit-pjatk-arc-2018-gr3.appspot.com',\n  messagingSenderId: '314895835823'\n};\nfirebase.initializeApp(config);\n\nclass App extends Component {\n  state = {\n    isLoggedIn: false\n  };\n\n  componentDidMount() {\n    this.unregisterAuthObserver = firebase\n      .auth()\n      .onAuthStateChanged(user => this.setState({ isLoggedIn: !!user }));\n\n    const settings = { timestampsInSnapshots: true };\n    firebase.firestore().settings(settings);\n  }\n\n  componentWillUnmount() {\n    this.unregisterAuthObserver();\n  }\n\n  render() {\n    const { isLoggedIn } = this.state;\n\n    if (!isLoggedIn) {\n      return <Login />;\n    } else {\n      return (\n        <div className=\"app\">\n          <h1>Expedition</h1>\n          <p>\n            Welcome {firebase.auth().currentUser.displayName}! You are now\n            logged-in!\n          </p>\n          <button onClick={() => firebase.auth().signOut()}>Logout</button>\n          <AddBook />\n          <br />\n          <Listing />\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as ServiceWorker from './components/ServiceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nServiceWorker.unregister();"],"sourceRoot":""}