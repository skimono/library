{"version":3,"sources":["login.js","AddingBooks.js","Listing.js","App.js","serviceWorker.js","index.js"],"names":["uiConfig","signInFlow","signInOptions","firebase","auth","GoogleAuthProvider","PROVIDER_ID","FacebookAuthProvider","EmailAuthProvider","callbacks","signInSuccessWithAuthResult","Login","react_default","a","createElement","StyledFirebaseAuth_default","firebaseAuth","Component","AddBook","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateInput","e","setState","defineProperty","target","name","value","addBook","preventDefault","firestore","collection","add","title","state","author","addedBy","currentUser","uid","then","console","log","onSubmit","type","placeholder","onChange","Listing","elements","_this2","onSnapshot","querySnapshot","forEach","doc","push","objectSpread","id","data","list","map","el","key","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","App","isLoggedIn","unregisterAuthObserver","onAuthStateChanged","user","settings","timestampsInSnapshots","className","displayName","onClick","signOut","AddingBooks","src_Listing","login","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d8343745.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth'\nimport firebase from 'firebase'\n\nconst uiConfig = {\n    signInFlow: 'popup',\n    signInOptions: [\n        firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n        firebase.auth.FacebookAuthProvider.PROVIDER_ID,\n        firebase.auth.EmailAuthProvider.PROVIDER_ID\n    ],\n    callbacks: {\n        signInSuccessWithAuthResult: () => false\n  }\n}\n\nclass Login extends Component {\n    render() {\n        return (\n            <div>\n            <h1>Expedition</h1>\n            <p>Please Log-in:</p>\n            {<StyledFirebaseAuth uiConfig={uiConfig} firebaseAuth={firebase.auth()}/>}\n            </div>\n        )\n    }\n}\n\nexport default Login","import React, {Component} from 'react'\nimport firebase from 'firebase'\n\nclass AddBook extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n         title: '',\n         author: '',\n        };\n    }\n\n    updateInput = e => {\n        this.setState({\n          [e.target.name]: e.target.value\n        });\n    }\n\n    addBook = e => {\n        e.preventDefault();\n\n        firebase.firestore().collection('Books').add({\n          title: this.state.title,\n          author: this.state.author,\n          addedBy: firebase.auth().currentUser.uid  \n        })\n        .then(() => console.log('Document added')); \n\n        this.setState({\n          title: '',\n          author: '',  \n        });\n      };\n\n    render() {\n\n        return (\n        <div>\n            <p>Add additional books:</p>\n            <form onSubmit={this.addBook}>\n                <input\n                type=\"text\"\n                name=\"title\"\n                placeholder=\"Title\"\n                onChange={this.updateInput}\n                value={this.state.title}\n                />\n                <input\n                type=\"text\"\n                name=\"author\"\n                placeholder=\"Author\"\n                onChange={this.updateInput}\n                value={this.state.author}\n                />\n                <button type=\"submit\">Submit</button>\n            </form>\n        </div>\n        );\n    }\n\n}\nexport default AddBook;","import React, {Component} from 'react'\nimport firebase from 'firebase'\n\nclass Listing extends Component {\n    \n    state = {\n        elements: []\n    }\n\n    list(){\n        firebase.firestore()\n            .collection('Books')\n            .onSnapshot(querySnapshot => {\n                const elements = []\n                querySnapshot.forEach(doc =>\n                    elements.push({id: doc.id, ...doc.data()})\n                )\n                this.setState({elements: elements})\n            })\n    }\n\n    render() {\n        const {elements} = this.state\n        this.list()\n\n        return(\n            <div>\n                <p>List of known books:</p>\n                <ul>\n                    {elements.map(el =>\n                        <li key={el.id}>\n                            \"{el.title}\" &mdash; <i>{el.author}</i>\n                        </li>\n                    )}\n                </ul>\n            </div>\n        )\n    }\n}\nexport default Listing;","import React, {Component} from 'react'\nimport Login from './login'\nimport AddBook from './AddingBooks'\nimport Listing from './Listing'\nimport firebase from 'firebase'\n\nvar config = {\n  apiKey: \"AIzaSyDb6MxVPz02Dzu6TBU6uRMZk6lSfsEuH8E\",\n  authDomain: \"solwit-pjatk-arc-2018-gr3.firebaseapp.com\",\n  databaseURL: \"https://solwit-pjatk-arc-2018-gr3.firebaseio.com\",\n  projectId: \"solwit-pjatk-arc-2018-gr3\",\n  storageBucket: \"solwit-pjatk-arc-2018-gr3.appspot.com\",\n  messagingSenderId: \"314895835823\"\n}\nfirebase.initializeApp(config)\n\n\nclass App extends Component {\n\n  state = {\n    isLoggedIn: false,\n  }\n\n  componentDidMount() {\n    this.unregisterAuthObserver = firebase.auth().onAuthStateChanged(\n     (user) => this.setState({isLoggedIn: !!user})\n    )\n\n    const settings = {timestampsInSnapshots: true}\n    firebase.firestore().settings(settings)\n  }\n \n  componentWillUnmount() {\n    this.unregisterAuthObserver()\n  }\n\n  render() {\n    const {isLoggedIn} = this.state\n\n    if(!isLoggedIn) {\n      return (\n          <Login/>)\n    } else {\n      return (\n        <div className='app'>\n          <h1>Expedition</h1>\n          <p>Welcome {firebase.auth().currentUser.displayName}! You are now loged-in!</p>\n          <button onClick={() => firebase.auth().signOut()}>Logout</button>\n          <AddBook/>\n          <br/>\n          <Listing/>\n        </div>\n      )\n    }\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();"],"sourceRoot":""}